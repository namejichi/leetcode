class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int size1 = nums1.size();
        int size2 = nums2.size();
        int size = size1 + size2;
        if (size % 2) {
            return findKth(nums1, 0, nums2, 0, size / 2 + 1);
        }
        else {
            double a = findKth(nums1, 0, nums2, 0, size / 2);
            double b = findKth(nums1, 0, nums2, 0, size / 2 + 1);
            cout << a << ' ' << b << endl;
            return (a + b) / 2;
        }
    }
    double findKth(vector<int>& nums1, int start1, vector<int>& nums2, int start2, int k) {
        if ((int)nums1.size() - start1 > (int)nums2.size() - start2) {
            return findKth(nums2, start2, nums1, start1, k);
        }
        if ((int)nums1.size() == start1) {
            return nums2[k - 1];
        }
        if (k == 1) {
            return min(nums1[start1], nums2[start2]);
        }
        int pos1 = min(k / 2, (int)nums1.size() - start1);
        int pos2 = k - pos1;
        if (pos1 == 0) {
            return nums2[start2 + k - 1];
        }
        if (nums1[start1 + pos1 - 1] == nums2[start2 + pos2 - 1]) {
            return nums1[start1 + pos1 - 1];
        }
        else if (nums1[start1 + pos1 - 1] < nums2[start2 + pos2 - 1]) {
            return findKth(nums1, start1 + pos1, nums2, start2, k - pos1);
        }
        else {
            return findKth(nums1, start1, nums2, start2 + pos2, k - pos2);
        }
    }
};
