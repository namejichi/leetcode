class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> res;
        vector<int> cur;
        dfs(candidates, target, 0, res, cur);
        return res;
    }
    void dfs(vector<int>& candidates, int target, int pos, vector<vector<int>>& res, vector<int>& cur) {
        if (target == 0) {
            res.push_back(cur);
            return;
        }
        for (int i = pos; i < candidates.size(); i++) {
            if (i > pos && candidates[i] == candidates[i - 1]) {
                continue;
            }
            if (target >= candidates[i]) {
                cur.push_back(candidates[i]);
                dfs(candidates, target - candidates[i], i + 1, res, cur);
                cur.pop_back();
            }
        }
    }
};
