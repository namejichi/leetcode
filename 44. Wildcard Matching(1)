class Solution {
public:
    bool isMatch(string s, string p) {
        //方一：DFS，超时
        //return dfs(s, 0, p, 0);
        /*
        //方二：DP,二维
        int size1 = s.size();
        int size2 = p.size();
        if (size2 > 30000) return false;
        vector<vector<bool>> dp(size1 + 1, vector<bool>(size2 + 1, false));
        dp[0][0] = true;
        for (int j = 1; j <= size2; j++) {
            dp[0][j] = dp[0][j - 1] && p[j - 1] == '*';
            for (int i = 1; i <= size1; i++) {
                if (p[j - 1] == '*') {
                    //dp[i][j] = dp[i - 1][j - 1] || dp[i - 1][j] || dp[i][j - 1];
                    dp[i][j] = dp[i - 1][j] || dp[i][j - 1];
                }
                else {
                    dp[i][j] = dp[i - 1][j - 1] && (s[i - 1] == p[j - 1] || p[j - 1] == '?');
                }
            }
        }
        return dp[size1][size2];
        */
        //方三：DP，一维
        int size1 = s.size();
        int size2 = p.size();
        if (size2 > 30000) return false;
        vector<bool> dp(size1 + 1, false);
        dp[0] = true;
        for (int j = 1; j <= size2; j++) {
            bool pre = dp[0];
            dp[0] = dp[0] && p[j - 1] == '*';
            for (int i = 1; i <= size1; i++) {
                bool tmp = dp[i];
                if (p[j - 1] == '*') {
                    dp[i] = dp[i - 1] || dp[i];
                }
                else {
                    dp[i] = pre && (s[i - 1] == p[j - 1] || p[j - 1] == '?');
                }
                pre = tmp;
            }
        }
        return dp[size1];
        //方四：greedy，没看……
    }
    bool dfs(string& s, int i, string& p, int j) {
        if (i == s.size() && j == p.size()) {
            return true;
        }
        if (j == p.size() || i == s.size()) {
            return false;
        }
        if (i < s.size() && (s[i] == p[j] || p[j] == '?')) {
            if (dfs(s, i + 1, p, j + 1)) {
                return true;
            }    
        }
        if (p[j] == '*') {
            if (dfs(s, i + 1, p, j) || dfs(s, i + 1, p, j + 1)) {
                return true;
            }
        }
        return false;
    }
};
