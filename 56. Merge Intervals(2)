/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    static bool cmp(Interval& a, Interval& b) {
        return a.start < b.start;
    }
    vector<Interval> merge(vector<Interval>& intervals) {
        //看了答案………………
        vector<Interval> res;
        sort(intervals.begin(), intervals.end(), cmp);
        for (int i = 0; i < intervals.size(); i++) {
            Interval cur = intervals[i];
            while (!res.empty() && isLap(cur, res.back())) {
                Interval pre = res.back();
                res.pop_back();
                cur.start = pre.start;
                cur.end = max(cur.end, pre.end);
            }
            res.push_back(cur);
        }
        return res;
    }
    bool isLap(Interval& a, Interval& b) {
        if (a.start > b.end) {
            return false;
        }
        return true;
    }
};
